THE ULTIMATE LINUX COOKBOOK: FROM BASICS TO ADVANCED RECIPES
=============================================================

Introduction
------------
Welcome to your Linux command-line cookbook!
This guide isn't just a list of commands; it's a collection of practical "recipes" to solve real-world problems.
We've organized it into chapters, just like a cookbook, so you can easily find the solution you need. We will cover file management,
text processing, system monitoring, networking, and much more. Let's start cooking!


=============================================================
CHAPTER 1: THE KITCHEN BASICS - INTERACTING WITH YOUR SYSTEM
=============================================================

man - The Recipe Book
---------------------
Purpose: Displays the manual (the "man page") for any command. It's your most important tool.
Use Case: You forget what an option for the `ls` command does.
Examples:
    # Get the manual for the 'ls' command
    $ man ls

    # Search for manuals related to a keyword (e.g., "copy files")
    $ man -k "copy files"

pwd - Where Am I?
-----------------
Purpose: Prints the name of your current working directory.
Use Case: You've navigated through several folders and lost track of your current location.
Example:
    $ pwd
    # Output might be: /home/username/Documents

cd - Changing Location
----------------------
Purpose: Changes your current directory.
Use Case: You need to move into a different folder to work with its files.
Examples:
    # Go to a specific directory
    $ cd /var/log

    # Go up one level
    $ cd ..

    # Go to your personal home directory (a shortcut)
    $ cd ~
    # Or even shorter:
    $ cd

    # Go to the last directory you were in
    $ cd -

ls - What's in Here?
--------------------
Purpose: Lists the files and directories in your current location.
Use Case: You need to see the contents of a folder.
Examples:
    # Simple list of contents
    $ ls

    # Detailed list with permissions, owner, size, and date (long format)
    $ ls -l

    # Detailed list with human-readable file sizes (e.g., KB, MB)
    $ ls -lh

    # List all files, including hidden ones (which start with a '.')
    $ ls -a

    # Combine flags: detailed, human-readable, and all files
    $ ls -lha

    # List contents of a different directory
    $ ls /etc/

history - What Did I Just Do?
-----------------------------
Purpose: Shows a list of the commands you've previously run.
Use Case: You ran a complex command yesterday and need to find it again.
Examples:
    # Show all previous commands
    $ history

    # Show the last 20 commands
    $ history 20

    # Run the last command again
    $ !!

    # Run command number 55 from your history list
    $ !55


=============================================================
CHAPTER 2: PANTRY MANAGEMENT - WORKING WITH FILES & DIRECTORIES
=============================================================

touch - Creating Empty Containers
---------------------------------
Purpose: Creates a new, empty file. If the file already exists, it updates its timestamp.
Use Case: You need to quickly create a configuration file before editing it.
Example:
    $ touch new_script.sh
    $ touch report.txt

cp - Making a Copy
------------------
Purpose: Copies files or directories.
Use Case: You want to back up a configuration file before you make changes to it.
Examples:
    # Copy a file in the same directory
    $ cp config.conf config.conf.bak

    # Copy a file to another directory
    $ cp report.pdf /home/username/Documents/

    # Copy a directory and all its contents (recursively)
    $ cp -r /var/log/app /home/username/log_backup

    # Verbose copy: shows what is being copied
    $ cp -v important.txt /mnt/backup/

mv - Moving and Renaming
------------------------
Purpose: Moves or renames files and directories.
Use Case: You downloaded a file with a generic name and want to rename it, or you need to move a file to a different folder.
Examples:
    # Rename a file
    $ mv old_filename.txt new_filename.txt

    # Move a file to a new directory
    $ mv report.docx ~/Documents/

    # Move multiple files into a directory
    $ mv report.docx image.png ~/archive/

rm - Throwing Things Away
-------------------------
Purpose: Removes (deletes) files and directories. WARNING: This is permanent! There is no trash bin.
Use Case: You have temporary files or old backups you no longer need.
Examples:
    # Remove a single file
    $ rm temp_file.txt

    # Ask for confirmation before deleting
    $ rm -i important_file.txt

    # Forcefully remove a file without prompting
    $ rm -f locked_file.txt

    # Remove a directory and all its contents (recursive and forceful)
    # BE EXTREMELY CAREFUL WITH THIS COMMAND!
    $ rm -rf /path/to/old_project

mkdir - Creating New Shelves
----------------------------
Purpose: Creates a new directory.
Use Case: You're starting a new project and need a folder to store its files.
Examples:
    # Create a single directory
    $ mkdir my_project

    # Create a nested directory structure all at once
    $ mkdir -p Project/src/assets/images

find - Finding Any Ingredient
-----------------------------
Purpose: A powerful tool to search for files and directories based on name, size, type, modification date, and more.
Use Case: You know a file named `report.pdf` exists somewhere on the system, but you don't know where.
Examples:
    # Find a file by name somewhere in your home directory (case-insensitive)
    $ find ~ -iname "report.pdf"

    # Find all directories named 'logs' anywhere on the system
    $ find / -type d -name "logs"

    # Find all files ending in .conf in the /etc directory
    $ find /etc -type f -name "*.conf"

    # Find all files larger than 100MB in your home directory
    $ find ~ -size +100M

    # Find all files modified in the last 24 hours
    $ find . -mtime -1

    # Find and execute a command on the results (e.g., delete all .tmp files)
    $ find . -name "*.tmp" -exec rm {} \;


=============================================================
CHAPTER 3: FOOD PREP - READING AND EDITING TEXT
=============================================================

cat - Quick Peek
----------------
Purpose: Displays the entire content of a file on the screen. Best for short files.
Use Case: You want to quickly view a small configuration file.
Examples:
    $ cat /etc/hostname

    # Display content with line numbers
    $ cat -n my_script.sh

    # Combine two files and display the result
    $ cat file1.txt file2.txt

less - Reading a Long Recipe
----------------------------
Purpose: Displays the content of a file one screen at a time. Ideal for long files.
Use Case: You need to read through a large log file.
Example:
    $ less /var/log/messages
    # Inside less: Use arrow keys to scroll, 'q' to quit, '/' to search.

head & tail - The First and Last Bites
--------------------------------------
Purpose: `head` shows the beginning of a file; `tail` shows the end.
Use Case: You want to see the most recent entries in a log file (`tail`) or check the headers of a CSV file (`head`).
Examples:
    # Show the first 10 lines of a file
    $ head /var/log/syslog

    # Show the first 20 lines
    $ head -n 20 /var/log/syslog

    # Show the last 10 lines of a file
    $ tail /var/log/syslog

    # Show the last 50 lines
    $ tail -n 50 /var/log/syslog

    # The killer feature: Watch a file in real-time for new lines
    $ tail -f /var/log/httpd/access_log

grep - Searching for an Ingredient
----------------------------------
Purpose: Searches for a specific pattern of text inside files.
Use Case: You need to find all lines containing the word "ERROR" in a log file.
Examples:
    # Search for a word in a file (case-sensitive)
    $ grep "ERROR" /var/log/messages

    # Case-insensitive search
    $ grep -i "error" /var/log/messages

    # Search recursively in a directory
    $ grep -r "db_password" /etc/

    # Show lines that DO NOT match the pattern
    $ grep -v "#" /etc/fstab

    # Show line numbers of matches
    $ grep -n "root" /etc/passwd

    # Count the number of matching lines
    $ grep -c "Failed" /var/log/secure

sed - The Food Processor
------------------------
Purpose: The "stream editor." It filters and transforms text. Most commonly used for find-and-replace.
Use Case: You need to replace every instance of "development" with "production" in a configuration file.
Examples:
    # Replace the first occurrence of 'old' with 'new' on each line
    $ sed -i 's/old/new/' file.txt

    # Replace ALL occurrences of 'old' with 'new' (global replace)
    $ sed 's/old/new/g' file.txt

    # Edit the file directly (in-place). Creates a backup with .bak extension
    $ sed -i.bak 's/database_dev/database_prod/g' config.php

    # Delete lines containing a specific pattern
    $ sed '/DEBUG/d' application.log


=============================================================
CHAPTER 4: KITCHEN RULES - PERMISSIONS AND OWNERSHIP
=============================================================

chmod - Setting Access Rules
----------------------------
Purpose: Changes the mode (permissions) of a file or directory.
Permissions: `r` (read), `w` (write), `x` (execute).
Owners: `u` (user/owner), `g` (group), `o` (others).
Use Case: You've written a script and need to make it executable.
Examples:
    # Make a script executable for the owner
    $ chmod u+x my_script.sh

    # Give owner read/write and group read-only permissions
    $ chmod u=rw,g=r file.txt

    # Remove execute permission for everyone
    $ chmod a-x sensitive_file

    # Using numbers (octal mode): r=4, w=2, x=1
    # chmod 755 means: owner=rwx(4+2+1=7), group=rx(4+0+1=5), other=rx(4+0+1=5)
    $ chmod 755 my_script.sh

    # Make permissions apply to a directory and everything inside it
    $ chmod -R 644 /var/www/html

chown - Changing the Chef
-------------------------
Purpose: Changes the owner and group of a file or directory.
Use Case: You've placed a file in a web server's directory, and it needs to be owned by the web server user (`apache` or `nginx`).
Examples:
    # Change the owner of a file (must be root/sudo)
    # sudo chown new_owner_name file.txt

    # Change the owner and group at the same time
    # sudo chown new_owner:new_group file.txt

    # Recursively change ownership for a directory
    # sudo chown -R nginx:nginx /var/www/html

sudo - Acting as Head Chef
--------------------------
Purpose: Executes a command with superuser (root) privileges.
Use Case: You need to perform an administrative task, like installing software or editing a system-wide configuration file.
Examples:
    # Install software using the package manager
    $ sudo dnf install htop

    # Edit a system file that your user doesn't own
    $ sudo vim /etc/hosts


=============================================================
CHAPTER 5: CHECKING THE THERMOMETERS - SYSTEM MONITORING
=============================================================

df & du - Checking Storage Space
--------------------------------
Purpose: `df` (disk free) shows disk usage per filesystem. `du` (disk usage) shows the space used by specific directories.
Use Case: Your server is running out of space, and you need to find out which partitions are full (`df`) and which folders are taking up the most space (`du`).
Examples:
    # Show disk usage in a human-readable format
    $ df -h

    # Show disk usage for the current directory (human-readable summary)
    $ du -sh .

    # Show the top 10 largest folders in the current directory
    $ du -ah . | sort -rh | head -n 10

free - Checking Memory
----------------------
Purpose: Displays the amount of free and used RAM and swap memory.
Use Case: Your application is slow, and you suspect it's running out of memory.
Example:
    # Show memory in a human-readable format
    $ free -h

top - The Live Kitchen View
---------------------------
Purpose: Provides a real-time, dynamic view of running processes.
Use Case: The system is slow, and you need to see which process is using all the CPU.
Example:
    $ top
    # Inside top: 'P' to sort by CPU, 'M' to sort by Memory, 'q' to quit.

ps - Listing the Kitchen Staff
------------------------------
Purpose: Shows a snapshot of the currently running processes.
Use Case: You need to find the Process ID (PID) of an application so you can stop it.
Examples:
    # List all processes running on the system
    $ ps aux

    # Filter the process list to find a specific application
    $ ps aux | grep "httpd"
